#
# Autogenerated by Thrift Compiler (0.9.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'lamp_types'

module Lamp
  class Client
    include ::Thrift::Client

    def ping()
      send_ping()
      return recv_ping()
    end

    def send_ping()
      send_message('ping', Ping_args)
    end

    def recv_ping()
      result = receive_message(Ping_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'ping failed: unknown result')
    end

    def info()
      send_info()
      return recv_info()
    end

    def send_info()
      send_message('info', Info_args)
    end

    def recv_info()
      result = receive_message(Info_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'info failed: unknown result')
    end

    def create(git_url, lesson_path, callback, options)
      send_create(git_url, lesson_path, callback, options)
      return recv_create()
    end

    def send_create(git_url, lesson_path, callback, options)
      send_message('create', Create_args, :git_url => git_url, :lesson_path => lesson_path, :callback => callback, :options => options)
    end

    def recv_create()
      result = receive_message(Create_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'create failed: unknown result')
    end

    def remove(lesson_path, callback)
      send_remove(lesson_path, callback)
      return recv_remove()
    end

    def send_remove(lesson_path, callback)
      send_message('remove', Remove_args, :lesson_path => lesson_path, :callback => callback)
    end

    def recv_remove()
      result = receive_message(Remove_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'remove failed: unknown result')
    end

  end

  class Processor
    include ::Thrift::Processor

    def process_ping(seqid, iprot, oprot)
      args = read_args(iprot, Ping_args)
      result = Ping_result.new()
      result.success = @handler.ping()
      write_result(result, oprot, 'ping', seqid)
    end

    def process_info(seqid, iprot, oprot)
      args = read_args(iprot, Info_args)
      result = Info_result.new()
      result.success = @handler.info()
      write_result(result, oprot, 'info', seqid)
    end

    def process_create(seqid, iprot, oprot)
      args = read_args(iprot, Create_args)
      result = Create_result.new()
      result.success = @handler.create(args.git_url, args.lesson_path, args.callback, args.options)
      write_result(result, oprot, 'create', seqid)
    end

    def process_remove(seqid, iprot, oprot)
      args = read_args(iprot, Remove_args)
      result = Remove_result.new()
      result.success = @handler.remove(args.lesson_path, args.callback)
      write_result(result, oprot, 'remove', seqid)
    end

  end

  # HELPER FUNCTIONS AND STRUCTURES

  class Ping_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Ping_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Info_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Info_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::LampInfo}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Create_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    GIT_URL = 1
    LESSON_PATH = 2
    CALLBACK = 3
    OPTIONS = 4

    FIELDS = {
      GIT_URL => {:type => ::Thrift::Types::STRING, :name => 'git_url'},
      LESSON_PATH => {:type => ::Thrift::Types::STRING, :name => 'lesson_path'},
      CALLBACK => {:type => ::Thrift::Types::STRING, :name => 'callback'},
      OPTIONS => {:type => ::Thrift::Types::MAP, :name => 'options', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRING}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Create_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::LampStatus}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Remove_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    LESSON_PATH = 1
    CALLBACK = 2

    FIELDS = {
      LESSON_PATH => {:type => ::Thrift::Types::STRING, :name => 'lesson_path'},
      CALLBACK => {:type => ::Thrift::Types::STRING, :name => 'callback'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Remove_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::LampStatus}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

end

